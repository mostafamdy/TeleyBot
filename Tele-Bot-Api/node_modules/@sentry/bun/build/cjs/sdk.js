Object.defineProperty(exports, '__esModule', { value: true });

const core = require('@sentry/core');
const node = require('@sentry/node');
const client = require('./client.js');
const bunserver = require('./integrations/bunserver.js');
const index = require('./transports/index.js');

/** Get the default integrations for the Bun SDK. */
function getDefaultIntegrations(_options) {
  // We return a copy of the defaultIntegrations here to avoid mutating this
  return [
    // Common
    core.inboundFiltersIntegration(),
    core.functionToStringIntegration(),
    core.linkedErrorsIntegration(),
    core.requestDataIntegration(),
    // Native Wrappers
    node.consoleIntegration(),
    node.httpIntegration(),
    node.nativeNodeFetchIntegration(),
    // Global Handlers
    node.onUncaughtExceptionIntegration(),
    node.onUnhandledRejectionIntegration(),
    // Event Info
    node.contextLinesIntegration(),
    node.nodeContextIntegration(),
    node.modulesIntegration(),
    // Bun Specific
    bunserver.bunServerIntegration(),
  ];
}

/**
 * The Sentry Bun SDK Client.
 *
 * To use this SDK, call the {@link init} function as early as possible in the
 * main entry module. To set context information or send manual events, use the
 * provided methods.
 *
 * @example
 * ```
 *
 * const { init } = require('@sentry/bun');
 *
 * init({
 *   dsn: '__DSN__',
 *   // ...
 * });
 * ```
 *
 * @example
 * ```
 *
 * const { addBreadcrumb } = require('@sentry/node');
 * addBreadcrumb({
 *   message: 'My Breadcrumb',
 *   // ...
 * });
 * ```
 *
 * @example
 * ```
 *
 * const Sentry = require('@sentry/node');
 * Sentry.captureMessage('Hello, world!');
 * Sentry.captureException(new Error('Good bye'));
 * Sentry.captureEvent({
 *   message: 'Manual',
 *   stacktrace: [
 *     // ...
 *   ],
 * });
 * ```
 *
 * @see {@link BunOptions} for documentation on configuration options.
 */
function init(options = {}) {
  options.clientClass = client.BunClient;
  options.transport = options.transport || index.makeFetchTransport;

  if (options.defaultIntegrations === undefined) {
    options.defaultIntegrations = getDefaultIntegrations();
  }

  return node.init(options);
}

exports.getDefaultIntegrations = getDefaultIntegrations;
exports.init = init;
//# sourceMappingURL=sdk.js.map
