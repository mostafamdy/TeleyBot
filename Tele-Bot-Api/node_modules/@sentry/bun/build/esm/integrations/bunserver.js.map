{"version":3,"file":"bunserver.js","sources":["../../../src/integrations/bunserver.ts"],"sourcesContent":["import {\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  captureException,\n  continueTrace,\n  defineIntegration,\n  setHttpStatus,\n  startSpan,\n  withIsolationScope,\n} from '@sentry/core';\nimport type { IntegrationFn, SpanAttributes } from '@sentry/types';\nimport { getSanitizedUrlString, parseUrl } from '@sentry/utils';\n\nconst INTEGRATION_NAME = 'BunServer';\n\nconst _bunServerIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentBunServe();\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Instruments `Bun.serve` to automatically create transactions and capture errors.\n *\n * Enabled by default in the Bun SDK.\n *\n * ```js\n * Sentry.init({\n *   integrations: [\n *     Sentry.bunServerIntegration(),\n *   ],\n * })\n * ```\n */\nexport const bunServerIntegration = defineIntegration(_bunServerIntegration);\n\n/**\n * Instruments Bun.serve by patching it's options.\n */\nexport function instrumentBunServe(): void {\n  Bun.serve = new Proxy(Bun.serve, {\n    apply(serveTarget, serveThisArg, serveArgs: Parameters<typeof Bun.serve>) {\n      instrumentBunServeOptions(serveArgs[0]);\n      return serveTarget.apply(serveThisArg, serveArgs);\n    },\n  });\n}\n\n/**\n * Instruments Bun.serve `fetch` option to automatically create spans and capture errors.\n */\nfunction instrumentBunServeOptions(serveOptions: Parameters<typeof Bun.serve>[0]): void {\n  serveOptions.fetch = new Proxy(serveOptions.fetch, {\n    apply(fetchTarget, fetchThisArg, fetchArgs: Parameters<typeof serveOptions.fetch>) {\n      return withIsolationScope(isolationScope => {\n        const request = fetchArgs[0];\n        const upperCaseMethod = request.method.toUpperCase();\n        if (upperCaseMethod === 'OPTIONS' || upperCaseMethod === 'HEAD') {\n          return fetchTarget.apply(fetchThisArg, fetchArgs);\n        }\n\n        const parsedUrl = parseUrl(request.url);\n        const attributes: SpanAttributes = {\n          [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.bun.serve',\n          'http.request.method': request.method || 'GET',\n          [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n        };\n        if (parsedUrl.search) {\n          attributes['http.query'] = parsedUrl.search;\n        }\n\n        const url = getSanitizedUrlString(parsedUrl);\n\n        isolationScope.setSDKProcessingMetadata({\n          request: {\n            url,\n            method: request.method,\n            headers: request.headers.toJSON(),\n          },\n        });\n\n        return continueTrace(\n          { sentryTrace: request.headers.get('sentry-trace') || '', baggage: request.headers.get('baggage') },\n          () => {\n            return startSpan(\n              {\n                attributes,\n                op: 'http.server',\n                name: `${request.method} ${parsedUrl.path || '/'}`,\n              },\n              async span => {\n                try {\n                  const response = await (fetchTarget.apply(fetchThisArg, fetchArgs) as ReturnType<\n                    typeof serveOptions.fetch\n                  >);\n                  if (response && response.status) {\n                    setHttpStatus(span, response.status);\n                    isolationScope.setContext('response', {\n                      headers: response.headers.toJSON(),\n                      status_code: response.status,\n                    });\n                  }\n                  return response;\n                } catch (e) {\n                  captureException(e, {\n                    mechanism: {\n                      type: 'bun',\n                      handled: false,\n                      data: {\n                        function: 'serve',\n                      },\n                    },\n                  });\n                  throw e;\n                }\n              },\n            );\n          },\n        );\n      });\n    },\n  });\n}\n"],"names":[],"mappings":"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"}